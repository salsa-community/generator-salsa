import { Component, Vue, Inject } from 'vue-property-decorator';

import CatalogoService from '@/shared/catalogo/catalogo.service';
import AlertService from '@/shared/alert/alert.service';

import { <%= page.name.pascalCase%>, <%= page.name.pascalCase%>Api } from '@/shared/perfil-usuario/api';
import { required, minLength, maxLength, helpers } from 'vuelidate/lib/validators';

    <%_ for (const idx in page.properties) { _%>
      <%_ let campo = page.properties[idx]; _%>
      <%_ if (campo.validations.regex) { _%>
const <%= campo.name.constantCase%> = helpers.regex(
  '<%=campo.name.camelCase%>',
  <%=campo.validations.regex%>
);
        <%_ } _%>
    <%_ }; _%>

const validations: any = {

  <%= page.name.camelCase%>: {
  <%_ for (const idx in page.properties) { _%>
    <%_ let campo = page.properties[idx]; _%>
    <%= campo.name.camelCase%>: {
      <%_ if (campo.validations.required) { _%>
      required,
      <%_ }_%>
      <%_ if (campo.validations.min) { _%>
      minLength: minLength(<%= campo.validations.min%>),
      <%_ } _%>
      <%_ if (campo.validations.max) { _%>
      maxLength: maxLength(<%= campo.validations.max%>),
      <%_ } _%>
      <%_ if (campo.validations.regex) { _%>
      <%= campo.name.constantCase%>,
      <%_ } _%>
    },
  <%_ }; _%>
  },
};

@Component({
  validations,
})
export default class <%= page.name.pascalCase%>Component extends Vue {
  @Inject('alertService') private alertService: () => AlertService;
  @Inject('<%= page.name.camelCase%>Api') private <%= page.name.camelCase%>Api: () => <%= page.name.pascalCase%>Api;
  @Inject('catalogoService') private catalogoService: () => CatalogoService;

  public <%= page.name.camelCase%>: <%= page.name.pascalCase%> = {};
  public isSaving = false;
  public currentLanguage = '';

        <%_ for (const idx in page.properties) { _%>
          <%_ let campo = page.properties[idx]; _%>
          <%_ if (campo.uiType === 'input-date') { _%>
            <%_ if (campo.validations.min) { _%>
  public minDate<%= campo.name.pascalCase%> = new Date('<%=campo.validations.min%>');
            <%_ } _%>
            <%_ if (campo.validations.max) { _%>
  public maxDate<%= campo.name.pascalCase%> = new Date('<%=campo.validations.max%>');
            <%_ } _%>
          <%_ } _%>
          <%_ if (campo.uiType === 'input-image') { _%>
            <%_ if (campo.validations) { _%>
  public estadoInvalido<%= campo.name.pascalCase%> = false;
            <%_ } _%>
          <%_ } _%>
          <%_ if (campo.uiType === 'input-select-many') { _%>
  public selected<%= campo.name.pascalCase%> = [];
          <%_ } _%>
          <%_ if (campo.uiType === 'input-select-one' || campo.uiType === 'input-select-radio') { _%>
  public <%= campo.name.camelCase%>Options: Array<any> = [];
          <%_ } _%>
        <%_ }; _%>

  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (to.params.campoId) {
        vm.retrieveCampo(to.params.campoId);
      }
    });
  }

  created(): void {
    this.currentLanguage = this.$store.getters.currentLanguage;
    this.$store.watch(
      () => this.$store.getters.currentLanguage,
      () => {
        this.currentLanguage = this.$store.getters.currentLanguage;
      }
    );
  }

  mounted(): void {
    this.initCatalogos();
    this.get();
  }

  public initCatalogos(): void {
    <%_ for (const idx in page.properties) { _%>
      <%_ let campo = page.properties[idx]; _%>
      <%_ if (campo.uiType === 'input-select-one' || campo.uiType === 'input-select-radio') { _%>
    this.catalogoService()
      .get('<%= campo.catalog%>')
      .then(result => {
        this.<%= campo.name.camelCase%>Options = result;
      });
      <%_ } _%>
    <%_ }; _%>    
  }

  public get(): void {
    this.<%= page.name.camelCase%>Api()
      .get<%= page.name.pascalCase%>()
      .then(res => {
        this.<%= page.name.camelCase%> = res.data;
      })
      .catch(() => { });
  }

  public save(): void {
    this.<%= page.name.camelCase%>Api()
      .update<%= page.name.pascalCase%>ById(1, this.<%= page.name.camelCase%>)
      .then(res => {
        this.alertService().showSuccess(this, this.$t('global.messages.saved.detail', { section: this.$t('<%= page.name.dashCase%>.title') }).toString());
      })
      .catch(err => {
        this.alertService().showError(this, this.$t('global.messages.error.saved', { section: this.$t('<%= page.name.dashCase%>.title') }).toString());
      });
  }

  public cancel(): void {
    this.$router.push('/');
  }

  public previousState(): void {
    this.$router.go(-1);
  }

  public initRelationships(): void {}
}
